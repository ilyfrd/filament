material {
    name : findingVehicle,
    shadingModel : unlit,
    requires : [
        uv0
    ],
    blending : transparent,
    parameters : [
        {
            type : float,
            name : innerRadius
        },
        {
            type : float,
            name : outerRadius
        }
    ]
}

fragment {
    float4 computerColor(float currentRadius, float radius, float radiusMax)
    {
        float4 result;

        float colorValue = 1.0;
        float4 brightestColor = float4(colorValue, colorValue, colorValue, 0.1);

        if(currentRadius > radius)
        {
            result = float4(0, 0, 0, 0);
        }
        else
        {
            float radio = currentRadius / (radius * 1.5);
            float factor = radius / radiusMax;
            factor = pow(factor, 9.0);
            float factor2 = 60.0 * factor + 1.0 * (1.0 - factor);
            radio = pow(radio, factor2);
            result = brightestColor * radio;
        }

        return result;
    }

    void material(inout MaterialInputs material) {
        prepareMaterial(material);

        float2 uv = uvToRenderTargetUV(getUV0());
        float2 center = float2(0.5, 0.5);
        float currentRadius = length(float3(uv, 0) - float3(center, 0));

        float4 color1 = computerColor(currentRadius, materialParams.outerRadius, 0.5);
        float4 color2 = computerColor(currentRadius, materialParams.innerRadius, 0.4);
        float alpha = color1.a > color2.a ? color1.a : color2.a;
        material.baseColor = float4(color1.rgb * 0.3 + color2.rgb * 0.7, alpha);
    }
}
