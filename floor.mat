material {
    name : floor,
    shadingModel : lit,
    requires : [
        uv0
    ],
    parameters : [
        {
            type : sampler2d,
            name : albedoTexture
        },
        {
            type : sampler2d,
            name : albedoTexture2
        },
        {
            type : sampler2d,
            name : normalTexture
        },
        {
            type : sampler2d,
            name : normalTexture2
        },       
        {
            type : sampler2d,
            name : roughnessTexture
        },        
        {
            type : sampler2d,
            name : roughnessTexture2
        },        
        {
            type : sampler2d,
            name : maskTexture
        },

        {
            type : float,
            name : uvOffsetX
        }
    ]
}




fragment {
    float3 toLinear(float3 color, float factor)
    {
        return float3(pow(color.r, factor), pow(color.g, factor), pow(color.b, factor));
    }

    float getLod(float2 uv, float divider)
    {
        float2 uv2 = (uv - 0.5) * 2.0;
        float2 index = floor(abs(uv2) / 2.0 / divider);
        float lod = index.x > index.y ? index.x : index.y;
        lod = pow(lod, 1.0 / 1.4);
        if(lod > 9.0) lod = 9.0;

        return lod;
    }

    void material(inout MaterialInputs material) {

        float2 uv = uvToRenderTargetUV(getUV0());

        int tileSplit = 40;
        float divider = 1.0 / float(tileSplit);

        int maskTileSplit = 10;
        float maskDivider = 1.0 / float(maskTileSplit);

        float lod = getLod(uv, divider);

        uv.x = mod(uv.x + materialParams.uvOffsetX, 1.0);
        float2 tileUv = float2(mod(uv, divider) / divider);

        float2 maskTileUv = float2(mod(uv, maskDivider) / maskDivider);
        float mask = texture(materialParams_maskTexture, maskTileUv).r;

        if(mask < 0.5)
        {
            material.normal = textureLod(materialParams_normalTexture, tileUv, lod).rgb * 2.0 - 1.0;
            float normalScale = 2.0;
            material.normal.xy *= normalScale;
            material.normal.z = sqrt(1.0 - saturate(dot(material.normal.xy, material.normal.xy)));
        }
        else
        {
            material.normal = textureLod(materialParams_normalTexture2, tileUv, lod).rgb * 2.0 - 1.0;
        }

        prepareMaterial(material);
        
        if(mask < 0.5)
        {
            material.baseColor = textureLod(materialParams_albedoTexture, tileUv, lod);
            material.baseColor.rgb = toLinear(material.baseColor.rgb, 1.5);
            material.roughness = textureLod(materialParams_roughnessTexture, tileUv, lod).r;
            material.metallic = 0.0;

        }
        else
        {
            material.baseColor = textureLod(materialParams_albedoTexture2, tileUv, lod);
            material.baseColor.rgb = toLinear(material.baseColor.rgb, 1.6);
            material.roughness = textureLod(materialParams_roughnessTexture2, tileUv, lod).r;
            material.metallic = 0.5727;

        }
        
    }
}
